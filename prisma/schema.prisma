// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id       String @id @default(uuid())
  title    String
  imageSrc String

  userProgress UserProgress[]
  units        Unit[]
}

model UserProgress {
  userId       String @id
  userName     String @default("User")
  userImageSrc String @default("/mascot.svg")
  hearts       Int    @default(5)
  points       Int    @default(0)

  activeCourseId String
  activeCourse   Course @relation(fields: [activeCourseId], references: [id], onDelete: Cascade)
}

model Unit {
  id          String @id @default(uuid())
  title       String
  description String @db.Text
  order       Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]
}

model Lesson {
  id    String @id @default(uuid())
  title String
  order Int

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  challenges Challenge[]
}

enum CHALLENGE_TYPE {
  SELECT
  ASSIST
}

model Challenge {
  id       String         @id @default(uuid())
  type     CHALLENGE_TYPE
  question String         @db.Text
  order    Int

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  challengeOptions    ChallengeOption[]
  challengeProgresses ChallengeProgress[]
}

model ChallengeOption {
  id       String  @id @default(uuid())
  text     String  @db.Text
  correct  Boolean
  imageSrc String? @db.Text
  audioSrc String? @db.Text

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model ChallengeProgress {
  id        String  @id @default(uuid())
  userId    String
  completed Boolean @default(false)

  challengeId String
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
}

model UserSubscription {
  id     String @id @default(uuid())
  userId String @unique

  stripeCustomerId       String   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime @map(name: "stripe_current_period_end")
}
